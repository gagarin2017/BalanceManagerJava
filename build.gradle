plugins {
	id 'java'
	id 'application'
	id 'eclipse'
	id 'groovy'
}

version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
}

dependencies {

	compile group: 'com.google.inject', name: 'guice', version: '4.2.2'

	implementation 'com.google.guava:guava:28.0-jre'

	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.0'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
	compile group: 'org.json', name: 'json', version: '20190722'

	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.1'
	
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.1'
	
	// https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	
	
	compile 'de.vandermeer:asciitable:0.3.2'

	compile "org.codehaus.groovy:groovy:3.0.7"

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
	testCompile "org.jmockit:jmockit:1.49"
	testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.2'
	// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.0'
//	testCompile group: 'com.adelean', name: 'inject-resources-core', version: '0.1.0'
//	testCompile group: 'com.adelean', name: 'inject-resources-junit-jupiter', version: '0.1.0'
	
	
	// mandatory dependencies for using Spock
	testCompile platform("org.spockframework:spock-bom:2.0-M4-groovy-3.0")
	testCompile "org.spockframework:spock-core"
}

application {
	mainClassName = 'com.greenland.balanceManager.java.app.App'
}

tasks.withType(Test) {
	useJUnitPlatform()
	
	testLogging {
		events "passed", "skipped", "failed"
	}
}

//test {
//	useJUnitPlatform()
//
//	testLogging {
//		events "passed", "skipped", "failed"
//	}
//}

test {
	jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
		attributes 'Implementation-Title': 'Gradle Jar File Example',
		'Implementation-Version': version,
		'Main-Class': 'com.greenland.balanceManager.java.app.external.BalanceManagerExternalImpl'
	}
	baseName = project.name + '-all'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

// integration tests
sourceSets {
	intTest {
		java.srcDir file('src/intTest/java')
		resources.srcDir file('src/intTest/resources')
		compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
	}
}

configurations {
	intTestImplementation.extendsFrom implementation
	intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
	description = 'Runs integration tests.'
	group = 'verification'

	
	testClassesDirs = sourceSets.intTest.output.classesDirs
	classpath = sourceSets.intTest.runtimeClasspath
	print('Running tests from testClassesDirs:'+testClassesDirs)
	print('Running tests from classpath:'+classpath)
	shouldRunAfter test
}

check.dependsOn integrationTest